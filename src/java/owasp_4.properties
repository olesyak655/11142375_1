title=<h1 align="center">A4-Insecure Direct Object References</h1>
description=<h2 align="center">A general description of the problem</h2>A direct object reference occurs when a developer exposes a reference to an internal implementation object, such as a file, directory, or database key. Without an access control check or other protection, attackers can manipulate these references to access unauthorized data.
impact=<h2 align="center">Outline typical impact of attacks exploiting that weakness</h2><p><b>Am I Vulnerable To 'Insecure Direct Object References'?</b></p><p align="justify">The best way to find out if an application is vulnerable to insecure direct object references is to verify that all object references have appropriate defenses. To achieve this, consider:</p><ol><li>For direct references to restricted resources, does the application fail to verify the user is authorized to access the exact resource they have requested?</li><li>If the reference is an indirect reference, does the mapping to the direct reference fail to limit the values to those authorized for the current user?</li></ol><p align="justify">Code review of the application can quickly verify whether either approach is implemented safely. Testing is also effective for identifying direct object references and whether they are safe. Automated tools typically do not look for such flaws because they cannot recognize what requires protection or what is safe or unsafe.</p>
scenario=<h2 align="center">Example Attack Scenarios</h2><p>The application uses unverified data in a SQL call that is accessing account information:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String query = "SELECT * FROM accts WHERE account = ?";</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PreparedStatement pstmt = connection.prepareStatement(query , \u2026 );</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pstmt.setString( 1, request.getParameter("acct"));</p><p>ResultSet results = pstmt.executeQuery( );</p><p>The attacker simply modifies the \u2018acct\u2019 parameter in their browser to send whatever account number they want. If not verified, the attacker can access any user\u2019s account, instead of only the intended customer\u2019s account.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://example.com/app/accountInfo?acct=notmyacct</p>
avoid=<h2 align="center">Outline how the weakness can be avoided</h2><p><b>How Do I Prevent 'Insecure Direct Object References'?</b></p><p>Preventing insecure direct object references requires selecting an approach for protecting each user accessible object (e.g., object number, filename):</p><ol><li><b>Use per user or session indirect object references.</b>This prevents attackers from directly targeting unauthorized resources. For example, instead of using the resource\u2019s database key, a drop down list of six resources authorized for the current user could use the numbers 1 to 6 to indicate which value the user selected. The application has to map the per-user indirect reference back to the actual database key on the server. OWASP\u2019s ESAPI includes both sequential and random access reference maps that developers can use to eliminate direct object references.</li><li><b>Check access.</b>Each use of a direct object reference from an untrusted source must include an access control check to ensure the user is authorized for the requested object.</li></ol>
external_resources=<h2 align="center">Links to external resources for further information</h2><ul><li><a href="http://cwe.mitre.org/data/definitions/639.html">CWE Entry 639 on Insecure Direct Object References</a></li><li><a href="http://cwe.mitre.org/data/definitions/22.html">CWE Entry 22 on Path Traversal</a></li></ul> 