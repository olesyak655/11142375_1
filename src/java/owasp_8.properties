title=<h1 align="center">A8-Cross-Site Request Forgery (CSRF)</h1>
description=<h2 align="center">A general description of the problem</h2>A CSRF attack forces a logged-on victim\u2019s browser to send a forged HTTP request, including the victim\u2019s session cookie and any other automatically included authentication information, to a vulnerable web application. This allows the attacker to force the victim\u2019s browser to generate requests the vulnerable application thinks are legitimate requests from the victim.
impact=<h2 align="center">Outline typical impact of attacks exploiting that weakness</h2><p><b>Am I Vulnerable To 'Cross-Site Request Forgery (CSRF)'?</b></p><p align="justify">To check whether an application is vulnerable, see if any links and forms lack an unpredictable CSRF token. Without such a token, attackers can forge malicious requests. An alternate defense is to require the user to prove they intended to submit the request, either through reauthentication, or some other proof they are a real user (e.g., a CAPTCHA).<br><br>Focus on the links and forms that invoke state-changing functions, since those are the most important CSRF targets.<br><br>You should check multistep transactions, as they are not inherently immune. Attackers can easily forge a series of requests by using multiple tags or possibly JavaScript.<br><br>Note that session cookies, source IP addresses, and other information automatically sent by the browser don\u2019t provide any defense against CSRF since this information is also included in forged requests.<br><br>OWASP\u2019s CSRF Tester tool can help generate test cases to demonstrate the dangers of CSRF flaws.</p>
scenario=<h2 align="center">Example Attack Scenarios</h2><p>The application allows a user to submit a state changing request that does not include anything secret. For example:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://example.com/app/transferFunds?amount=1500&destinationAccount=4673243243</p><p>So, the attacker constructs a request that will transfer money from the victim\u2019s account to the attacker\u2019s account, and then embeds this attack in an image request or iframe stored on various sites under the attacker\u2019s control:</p><p><xmp><img src="http://example.com/app/transferFunds?amount=1500&destinationAccount=attackersAcct#" width="0" height="0" /></xmp></p><p>If the victim visits any of the attacker\u2019s sites while already authenticated to example.com, these forged requests will automatically include the user\u2019s session info, authorizing the attacker\u2019s request.</p>
avoid=<h2 align="center">Outline how the weakness can be avoided</h2><p><b>How Do I Prevent 'Missing Function Level Access Control'?</b></p><p>Your application should have a consistent and easy to analyze authorization module that is invoked from all of your business functions. Frequently, such protection is provided by one or more components external to the application code.</p><ol><li>Think about the process for managing entitlements and ensure you can update and audit easily. Don\u2019t hard code.</li><li>The enforcement mechanism(s) should deny all access by default, requiring explicit grants to specific roles for access to every function.</li><li>If the function is involved in a workflow, check to make sure the conditions are in the proper state to allow access.</li><li>Ensure passwords are stored with an algorithm specifically designed for password protection, such as bcrypt, PBKDF2, or scrypt.</li></ol><p>NOTE: Most web applications don\u2019t display links and buttons to unauthorized functions, but this \u201cpresentation layer access control\u201d doesn\u2019t actually provide protection. You must also implement checks in the controller or business logic.</p>
external_resources=<h2 align="center">Links to external resources for further information</h2><ul><li><a href="http://cwe.mitre.org/data/definitions/352.html">CWE Entry 352 on CSRF</a></li></ul> 