title=<h1 align="center">A5-Security Misconfiguration</h1>
description=<h2 align="center">A general description of the problem</h2>Good security requires having a secure configuration defined and deployed for the application, frameworks, application server, web server, database server, and platform. Secure settings should be defined, implemented, and maintained, as defaults are often insecure. Additionally, software should be kept up to date.
impact=<h2 align="center">Outline typical impact of attacks exploiting that weakness</h2><p><b>Am I Vulnerable To 'Security Misconfiguration'?</b></p><p align="justify">Is your application missing the proper security hardening across any part of the application stack? Including:</p><ol><li>Is any of your software out of date? This includes the OS, Web/App Server, DBMS, applications, and all code libraries (see new A9).</li><li>Are any unnecessary features enabled or installed (e.g., ports, services, pages, accounts, privileges)?</li><li>Are default accounts and their passwords still enabled and unchanged?</li><li>Does your error handling reveal stack traces or other overly informative error messages to users?</li><li>Are the security settings in your development frameworks (e.g., Struts, Spring, ASP.NET) and libraries not set to secure values?</li></ol><p align="justify">Without a concerted, repeatable application security configuration process, systems are at a higher risk.</p>
scenario=<h2 align="center">Example Attack Scenarios</h2><p><b>Scenario #1:</b> The app server admin console is automatically installed and not removed. Default accounts aren\u2019t changed. Attacker discovers the standard admin pages are on your server, logs in with default passwords, and takes over.</p><p><b>Scenario #2:</b> Directory listing is not disabled on your server. Attacker discovers she can simply list directories to find any file. Attacker finds and downloads all your compiled Java classes, which she decompiles and reverse engineers to get all your custom code. She then finds a serious access control flaw in your application.</p><p><b>Scenario #3:</b> App server configuration allows stack traces to be returned to users, potentially exposing underlying flaws. Attackers love the extra information error messages provide.</p><p><b>Scenario #4:</b> App server comes with sample applications that are not removed from your production server. Said sample applications have well known security flaws attackers can use to compromise your server.</p>
avoid=<h2 align="center">Outline how the weakness can be avoided</h2><p><b>How Do I Prevent 'Security Misconfiguration'?</b></p><p>The primary recommendations are to establish all of the following:</p><ol><li>A repeatable hardening process that makes it fast and easy to deploy another environment that is properly locked down. Development, QA, and production environments should all be configured identically (with different passwords used in each environment). This process should be automated to minimize the effort required to setup a new secure environment.</li><li>A process for keeping abreast of and deploying all new software updates and patches in a timely manner to each deployed environment. This needs to include all code libraries as well (see new A9).</li><li>A strong application architecture that provides effective, secure separation between components.</li><li>Consider running scans and doing audits periodically to help detect future misconfigurations or missing patches.</li></ol>
external_resources=<h2 align="center">Links to external resources for further information</h2><ul><li><a href="http://www.pcmag.com/article2/0,2817,11525,00.asp">PC Magazine Article on Web Server Hardening</a></li><li><a href="http://cwe.mitre.org/data/definitions/2.html">CWE Entry 2 on Environmental Security Flaws</a></li><li><a href="http://benchmarks.cisecurity.org/downloads/benchmarks/">CIS Security Configuration Guides/Benchmarks</a></li></ul> 