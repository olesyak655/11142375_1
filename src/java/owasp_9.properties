title=<h1 align="center">A9-Using Components with Known Vulnerabilities</h1>
description=<h2 align="center">A general description of the problem</h2>Components, such as libraries, frameworks, and other software modules, almost always run with full privileges. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications using components with known vulnerabilities may undermine application defenses and enable a range of possible attacks and impacts.
impact=<h2 align="center">Outline typical impact of attacks exploiting that weakness</h2><p><b>Am I Vulnerable To 'Using Components with Known Vulnerabilities'?</b></p><p align="justify">In theory, it ought to be easy to figure out if you are currently using any vulnerable components or libraries. Unfortunately, vulnerability reports for commercial or open source software do not always specify exactly which versions of a component are vulnerable in a standard, searchable way. Further, not all libraries use an understandable version numbering system. Worst of all, not all vulnerabilities are reported to a central clearinghouse that is easy to search, although sites like CVE and NVD are becoming easier to search.<br><br>Determining if you are vulnerable requires searching these databases, as well as keeping abreast of project mailing lists and announcements for anything that might be a vulnerability. If one of your components does have a vulnerability, you should carefully evaluate whether you are actually vulnerable by checking to see if your code uses the part of the component with the vulnerability and whether the flaw could result in an impact you care about.</p>
scenario=<h2 align="center">Example Attack Scenarios</h2><p>Component vulnerabilities can cause almost any type of risk imaginable, ranging from the trivial to sophisticated malware designed to target a specific organization. Components almost always run with the full privilege of the application, so flaws in any component can be serious, The following two vulnerable components were downloaded 22m times in 2011.<ul><li>Apache CXF Authentication Bypass \u2013 By failing to provide an identity token, attackers could invoke any web service with full permission. (Apache CXF is a services framework, not to be confused with the Apache Application Server.)</li><li>Spring Remote Code Execution \u2013 Abuse of the Expression Language implementation in Spring allowed attackers to execute arbitrary code, effectively taking over the server.</li></ul><p>Every application using either of these vulnerable libraries is vulnerable to attack as both of these components are directly accessible by application users. Other vulnerable libraries, used deeper in an application, may be harder to exploit.</p></p>
avoid=<h2 align="center">Outline how the weakness can be avoided</h2><p><b>How Do I Prevent 'Using Components with Known Vulnerabilities'?</b></p><pOne option is not to use components that you didn\u2019t write. But that\u2019s not very realistic.<br><br>Most component projects do not create vulnerability patches for old versions. Instead, most simply fix the problem in the next version. So upgrading to these new versions is critical. Software projects should have a process in place to:</p><ol><li>Identify all components and the versions you are using, including all dependencies. (e.g., the versions plugin).</li><li>Monitor the security of these components in public databases, project mailing lists, and security mailing lists, and keep them up to date.</li><li>Establish security policies governing component use, such as requiring certain software development practices, passing security tests, and acceptable licenses.</li><li>Where appropriate, consider adding security wrappers around components to disable unused functionality and/ or secure weak or vulnerable aspects of the component.</li></ol>
external_resources=<h2 align="center">Links to external resources for further information</h2><ul><li><a href="http://www.aspectsecurity.com/research-presentations/the-unfortunate-reality-of-insecure-libraries">The Unfortunate Reality of Insecure Libraries</a></li><li><a href="http://en.wikipedia.org/wiki/Open_source_software_security">Open Source Software Security</a></li><li><a href="http://img.en25.com/Web/SonatypeInc/%7Bb2fa5ed8-938d-4bce-8a9c-d08ebeba826d%7D_Executive_Brief_-_Study-_Understanding_Security_Risks_in_OSS_Components-1.pdf">Addressing Security Concerns in Open Source Components</a></li><li><a href="http://cve.mitre.org/">MITRE Common Vulnerabilities and Exposures</a></li><li><a href="http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-0277">Example Mass Assignment Vulnerability that was fixed in ActiveRecord, a Ruby on Rails GEM</a></li></ul> 