title=<h1 align="center">A7-Missing Function Level Access Control</h1>
description=<h2 align="center">A general description of the problem</h2>Most web applications verify function level access rights before making that functionality visible in the UI. However, applications need to perform the same access control checks on the server when each function is accessed. If requests are not verified, attackers will be able to forge requests in order to access functionality without proper authorization.
impact=<h2 align="center">Outline typical impact of attacks exploiting that weakness</h2><p><b>Am I Vulnerable To 'Missing Function Level Access Control'?</b></p><p align="justify">The best way to find out if an application has failed to properly restrict function level access is to verify every application function:</p><ol><li>Does the UI show navigation to unauthorized functions?</li><li>Are server side authentication or authorization checks missing?</li><li>Are server side checks done that solely rely on information provided by the attacker?</li></ol><p>Using a proxy, browse your application with a privileged role. Then revisit restricted pages using a less privileged role. If the server responses are alike, you're probably vulnerable. Some testing proxies directly support this type of analysis.<br><br>You can also check the access control implementation in the code. Try following a single privileged request through the code and verifying the authorization pattern. Then search the codebase to find where that pattern is not being followed.<br><br>Automated tools are unlikely to find these problems.</p>
scenario=<h2 align="center">Example Attack Scenarios</h2><p><b>Scenario #1:</b> The attacker simply force browses to target URLs. The following URLs require authentication. Admin rights are also required for access to the admin_getappInfo page.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://example.com/app/getappInfo<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://example.com/app/admin_getappInfo</p><p>If an unauthenticated user can access either page, that\u2019s a flaw. If an authenticated, non-admin, user is allowed to access the admin_getappInfo page, this is also a flaw, and may lead the attacker to more improperly protected admin pages.</p><p><b>Scenario #2:</b> A page provides an 'action' parameter to specify the function being invoked, and different actions require different roles. If these roles aren\u2019t enforced, that\u2019s a flaw.</p>
avoid=<h2 align="center">Outline how the weakness can be avoided</h2><p><b>How Do I Prevent 'Missing Function Level Access Control'?</b></p><p>Your application should have a consistent and easy to analyze authorization module that is invoked from all of your business functions. Frequently, such protection is provided by one or more components external to the application code.</p><ol><li>Think about the process for managing entitlements and ensure you can update and audit easily. Don\u2019t hard code.</li><li>The enforcement mechanism(s) should deny all access by default, requiring explicit grants to specific roles for access to every function.</li><li>If the function is involved in a workflow, check to make sure the conditions are in the proper state to allow access.</li><li>Ensure passwords are stored with an algorithm specifically designed for password protection, such as bcrypt, PBKDF2, or scrypt.</li></ol><p>NOTE: Most web applications don\u2019t display links and buttons to unauthorized functions, but this \u201cpresentation layer access control\u201d doesn\u2019t actually provide protection. You must also implement checks in the controller or business logic.</p>
external_resources=<h2 align="center">Links to external resources for further information</h2><ul><li><a href="http://cwe.mitre.org/data/definitions/285.html">CWE Entry 285 on Improper Access Control (Authorization)</a></li></ul> 