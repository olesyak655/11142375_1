title=<h1 align="center">A2-Broken Authentication and Session Management</h1>
description=<h2 align="center">A general description of the problem</h2>Application functions related to authentication and session management are often not implemented correctly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users\u2019 identities.
impact=<h2 align="center">Outline typical impact of attacks exploiting that weakness</h2><p><b>Am I Vulnerable To 'Broken Authentication and Session Management'?</b></p><p>Are session management assets like user credentials and session IDs properly protected? You may be vulnerable if:</p><ol><li>User authentication credentials aren\u2019t protected when stored using hashing or encryption. See A6.</li><li>Credentials can be guessed or overwritten through weak account management functions (e.g., account creation, change password, recover password, weak session IDs).</li><li>Session IDs are exposed in the URL (e.g., URL rewriting).</li><li>Session IDs are vulnerable to session fixation attacks.</li><li>Session IDs don\u2019t timeout, or user sessions or authentication tokens, particularly single sign-on (SSO) tokens, aren\u2019t properly invalidated during logout.</li><li>Session IDs aren\u2019t rotated after successful login.</li><li>Passwords, session IDs, and other credentials are sent over unencrypted connections. See A6.</li></ol><p>See the ASVS requirement areas V2 and V3 for more details.</p>
scenario=<h2 align="center">Example Attack Scenarios</h2><p><b>Scenario #1:</b></p><p>Airline reservations application supports URL rewriting, putting session IDs in the URL:</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://example.com/sale/saleitems?sessionid=268544541&dest=Hawaii</p><p>An authenticated user of the site wants to let his friends know about the sale. He e-mails the above link without knowing he is also giving away his session ID. When his friends use the link they will use his session and credit card.</p><p><b>Scenario #2:</b></p><p>Application\u2019s timeouts aren\u2019t set properly. User uses a public computer to access site. Instead of selecting \u201clogout\u201d the user simply closes the browser tab and walks away. Attacker uses the same browser an hour later, and that browser is still authenticated.</p><p><b>Scenario #3:</b></p><p>Insider or external attacker gains access to the system\u2019s password database. User passwords are not properly hashed, exposing every users\u2019 password to the attacker.</p>
avoid=<h2 align="center">Outline how the weakness can be avoided</h2><p><b>How Do I Prevent 'Broken Authentication and Session Management'?</b></p>The primary recommendation for an organization is to make available to developers:<ol><li>A single set of strong authentication and session management controls. Such controls should strive to:<ol><li>meet all the authentication and session management requirements defined in OWASP\u2019s Application Security Verification Standard (ASVS) areas V2 (Authentication) and V3 (Session Management).</li><li>have a simple interface for developers. Consider the ESAPI Authenticator and User APIs as good examples to emulate, use, or build upon.</li></ol></li><li>Strong efforts should also be made to avoid XSS flaws which can be used to steal session IDs. See A3.</li></ol>
external_resources=<h2 align="center">Links to external resources for further information</h2><ul><li><a href="http://cwe.mitre.org/data/definitions/287.html">CWE Entry 287 on Improper Authentication</a></li><li><a href="http://cwe.mitre.org/data/definitions/384.html">CWE Entry 384 on Session Fixation</a></ul> 