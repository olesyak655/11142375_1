title=<h1 align="center">A10-Unvalidated Redirects and Forwards</h1>
description=<h2 align="center">A general description of the problem</h2>Web applications frequently redirect and forward users to other pages and websites, and use untrusted data to determine the destination pages. Without proper validation, attackers can redirect victims to phishing or malware sites, or use forwards to access unauthorized pages.
impact=<h2 align="center">Outline typical impact of attacks exploiting that weakness</h2><p><b>Am I Vulnerable To 'Unvalidated Redirects and Forwards'?</b></p><p align="justify">The best way to find out if an application has any unvalidated redirects or forwards is to:</p><ol><li>Review the code for all uses of redirect or forward (called a transfer in .NET). For each use, identify if the target URL is included in any parameter values. If so, if the target URL isn\u2019t validated against a whitelist, you are vulnerable.</li><li>Also, spider the site to see if it generates any redirects (HTTP response codes 300-307, typically 302). Look at the parameters supplied prior to the redirect to see if they appear to be a target URL or a piece of such a URL. If so, change the URL target and observe whether the site redirects to the new target.</li><li>If code is unavailable, check all parameters to see if they look like part of a redirect or forward URL destination and test those that do.</li></ol>
scenario=<h2 align="center">Example Attack Scenarios</h2><p><b>Scenario #1:</b> The application has a page called \u201credirect.jsp\u201d which takes a single parameter named \u201curl\u201d. The attacker crafts a malicious URL that redirects users to a malicious site that performs phishing and installs malware.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.example.com/redirect.jsp?url=evil.com</p><p><b>Scenario #2:</b>The application uses forwards to route requests between different parts of the site. To facilitate this, some pages use a parameter to indicate where the user should be sent if a transaction is successful. In this case, the attacker crafts a URL that will pass the application\u2019s access control check and then forwards the attacker to administrative functionality for which the attacker isn\u2019t authorized.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://www.example.com/boring.jsp?fwd=admin.jsp</p>
avoid=<h2 align="center">Outline how the weakness can be avoided</h2><p><b>How Do I Prevent 'Unvalidated Redirects and Forwards'?</b></p><p>Safe use of redirects and forwards can be done in a number of ways:</p><ol><li>Simply avoid using redirects and forwards.</li><li>If used, don\u2019t involve user parameters in calculating the destination. This can usually be done.</li><li>If destination parameters can\u2019t be avoided, ensure that the supplied value is valid, and authorized for the user.<br>It is recommended that any such destination parameters be a mapping value, rather than the actual URL or portion of the URL, and that server side code translate this mapping to the target URL.<br>Applications can use ESAPI to override the sendRedirect() method to make sure all redirect destinations are safe.</li></ol><p>Avoiding such flaws is extremely important as they are a favorite target of phishers trying to gain the user\u2019s trust.</p>
external_resources=<h2 align="center">Links to external resources for further information</h2><ul><li><a href="">CWE Entry 601 on Open Redirects</a></li><li><a href="">WASC Article on URL Redirector Abuse</a></li><li><a href="">Google blog article on the dangers of open redirects</a></li><li><a href="">OWASP Top 10 for .NET article on Unvalidated Redirects and Forwards</a></li></ul> 